version: 0.2

phases:
  install:
    commands:
      - echo "Instalando dependências..."
      # - curl -sL https://rpm.nodesource.com/setup_20.x | sudo bash -
      # - sudo yum install -y nodejs
      - sudo yum install -y net-tools  # Adiciona o net-tools
      - node -v # Verifique a versão do Node.js.
  
  pre_build:
    commands:
      - echo "Listando o conteúdo atual do diretório:"
      - pwd
      - ls -la
      - echo "Tentando acessar o diretório chronos-alert..."
      - cd chronos-alert || { echo "Diretório 'chronos-alert' não encontrado!"; exit 1; }
      - ls -la # Confirma o conteúdo dentro do diretório
      - echo "Fazendo pull do repositório..."
      - git pull origin main  
      - echo "Encerrando contêineres existentes no ambiente CodeBuild..."
      - docker-compose down || true
      # - echo "Identifique containers que estejam utilizando a porta 443..."
      # - sudo lsof -i :443 || echo "Porta 443 livre"
      # - echo "Liberando porta 443, se necessário..."
      # - sudo lsof -t -i :443 | xargs sudo kill -9 || echo "Porta 443 já está livre"
      - echo "Listando containers em execução..."
      - docker ps -a

  build:
    commands:
      # Instalar dependências do frontend
      - echo "Instalando dependências do frontend..."
      - cd client  # Acessa o diretório do frontend
      - yarn install # Instala as dependências do frontend
      - echo "Dependências do frontend instaladas"
      - yarn build  # Gera os arquivos de build do frontend

      # # Instalar dependências do backend
      - echo "Instalando dependências do backend..."
      - cd ../server  # Acessa o diretório do backend
      - yarn install  # Instala as dependências do backend
      - echo "Dependências do backend instaladas"
  
      # # Construir e iniciar os containers Docker
      - echo "Construindo e iniciando containers Docker..."
      - cd ../  # Volta para o diretório chronos-alert
      - docker-compose up --build -d  # Executa o Docker Compose
  
  post_build:
    commands:
      - echo "Build completado com sucesso!"
      # - echo "Compactando os artefatos em um arquivo .zip"
      # - zip -r ./ChronosAlertCodeBuild.zip .  # Garantir que o arquivo .zip seja gerado no diretório raiz

artifacts:
  files:
    - '**/*'  # Inclui todos os arquivos gerados na construção
    # - './ChronosAlertCodeBuild.zip'  # Garantir que o arquivo .zip seja incluído
  base-directory: .  # Diretório raiz, inclui frontend / backend
  discard-paths: yes  # Descarta os caminhos para o upload mais simples.