version: '3.9'
services:
  postgresql:
    image: postgres:16.4
    container_name: postgresql_container_chronos
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    # ports:
    #   - "5432:5432"
    volumes:
      - ./postgresql_data:/var/lib/postgressql/data
    networks:
      - chronos-network

  mongodb:
    image: mongo:latest
    container_name: mongodb_container_chronos
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    # ports:
    #   - "27017:27017"
    volumes:
      - ./mongodb_data:/data/db
    networks:
      - chronos-network

  keycloak:
    image: bitnami/keycloak:23.0.7
    container_name: keycloak_container_chronos
    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - DB_VENDOR=postgres
      - DB_ADDR=postgresql
      - DB_DATABASE=keycloak
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - KEYCLOAK_HTTP_PORT=${KEYCLOAK_HTTP_PORT}
      - KEYCLOAK_HTTP_RELATIVE_PATH=/auth
      - PROXY_ADDRESS_FORWARDING=true
      - KEYCLOAK_EXTRA_ARGS= --import-realm
      - KEYCLOAK_PROXY=edge
      - KC_PROXY=edge
      # - KC_HTTP_RESPONSE_HEADER_CONTENT_SECURITY_POLICY="frame-src 'self' http://chronos-alert.com;"

      # ports:
      #   - "8080:8080"
    volumes:
      - ./keycloak_data:/opt/keycloak/data
    # healthcheck:
    #   test: [ 'CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8080/auth/health/live' ]
    #   interval: 5s
    #   timeout: 5s
    #   retries: 30
    restart: always
    networks:
      - chronos-network

  nginx:
    container_name: nginx_container_chronos
    image: nginx:1.26
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/certificates/:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - keycloak
    networks:
      - chronos-network

  backend:
    container_name: backend_container_chronos
    image: backend_img_chronos:latest
    build:
      context: ./server
      dockerfile: Dockerfile
    # ports:
    #   - "5000:5000"
    environment:
      PORT: ${PORT}
      JF_URL: ${JF_URL}
      MONGO_URL: ${MONGO_URL}
      DATABASE: ${DATABASE}
      COLLECTION_RESULT: ${COLLECTION_RESULT}
      COLLECTION_POSTIT: ${COLLECTION_POSTIT}
      COLLECTION_NOTIF: ${COLLECTION_NOTIF}
    depends_on:
      - mongodb
      - keycloak
    networks:
      - chronos-network

  frontend:
    container_name: frontend_container_chronos
    image: frontend_img_chronos:latest
    build:
      context: ./client
      dockerfile: Dockerfile
    # ports:
    #   - "3000:3000"
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL}
      REACT_APP_KEYCLOAK_URL: ${REACT_APP_KEYCLOAK_URL}
    depends_on:
      - backend
      - keycloak
    networks:
      - chronos-network

networks:
  chronos-network:
    driver: bridge
  # volumes:
  # mongodb_data:
  # postgresql_data:
  #   driver: local
  # keycloak_data:
  #   driver: local
